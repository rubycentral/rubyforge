= Moving RubyForge to Redmine

This is the Redmine 0.9.4 release with changes to make it work for RubyForge

Stuff we need to do:

* Implement a migration script
* Implement mailing list management
* Ensure crons work

== Migration

I'm thinking about running the migration one project at a time.  So the script gets a GForgeGroup, creates a Project, finds the associated GForgeUsers, creates them if necessary, etc.  My hope here is that once we've completely done one project, the rest will run relatively smoothly, with only some edge cases to account for.

* see <tt>lib/tasks/migrate_from_gforge.rake</tt>
* To run it: <tt>rake db:migrate:reset && rake redmine:migrate_from_gforge REDMINE_LANG=en</tt>
* To migrate just one project: <tt>rake redmine:migrate_from_gforge REDMINE_LANG=en GFORGE_GROUP_TO_MIGRATE=rubygems</tt>

You can look at both object models in the same Ruby process like this:

  $ ./script/console
  Loading development environment (Rails 2.3.5)
  >> require 'lib/tasks/gforge_models.rb' ; include GForgeMigrate
  => Object
  >> GForgeGroup.count
  => 8821
  >> Project.count
  => 11

I found it helpful to add this to my <tt>~/.railsrc</tt>:

  if `pwd` =~ %r{Users/tom/github/rubyforge}
    require 'active_record'
    require 'lib/tasks/gforge_models.rb' ; include GForgeMigrate
  end

That way I don't have to type that <tt>require</tt> every time I get into <tt>script/console</tt> to troubleshoot a migration failure.

Some notes on the differences between the GForge and the Redmine object models:

* The GForge groups table gets mapped into the Redmine projects table.
* The GForge users table gets mapped into the Redmine users table and user_preferences table. 
* GForge stores the user language setting as a foreign key into the supported_languages table.  Redmine stores it as a two letter string (e.g., 'en') in users.language.
* The GForge <tt>user_group</tt> table gets mapped into the Redmine <tt>members</tt> table and <tt>member_roles</tt> table.
* The GForge <tt>artifact_group_list</tt> table gets mapped into rows in the Redmine <tt>projects_trackers</tt> table (<tt>projects</tt> HABTM <tt>trackers</tt>).  Redmine <tt>trackers</tt> are not per <tt>project</tt>; they are shared for the whole system.  The current migration only provisions rows in the <tt>projects_trackers</tt> table as they are needed - e.g., a <tt>project</tt> won't get a "Bug" <tt>tracker</tt> unless there's a GForge <tt>artifact</tt> in a "Bug" GForge <tt>artifact_group_list</tt> in this project.  If there's a GForge <tt>artifact_group_list</tt> with an unexpected name (e.g., "Tom's Issues") those get mapped into the "Bug" <tt>tracker</tt>.
* The GForge <tt>artifact</tt> table gets mapped into the Redmine <tt>issues</tt> table.  GForge <tt>artifacts</tt> have only three statuses (open/closed/deleted) whereas Redmine issues have six possible <tt>IssueStatus</tt> settings, so I just map them over to the <tt>IssueStatus</tt> with the same name.  GForge <tt>artifacts</tt> have five priority levels; these map onto Redmine's five standard <tt>IssueCategory</tt> values.
* The GForge <tt>artifact_category</tt> table is mapped to the Redmine <tt>issue_categories</tt> table.  

