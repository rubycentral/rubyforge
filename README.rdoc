= Moving RubyForge to Redmine

This is the Redmine 0.9.4 release with changes to make it work for RubyForge

Stuff we need to do:

* Implement a migration script
* Implement mailing list management
* Ensure crons work

== Migration

I'm thinking about running the migration one project at a time.  So the script gets a GForgeGroup, creates a Project, finds the associated GForgeUsers, creates them if necessary, etc.  My hope here is that once we've completely done one project, the rest will run relatively smoothly, with only some edge cases to account for.

Migration FIXMEs

* need to upgrade base redmine to latest release - 0.9.5
* why does user102@example.org/password have no issues here /my/page
* need to populate activity, e.g., /projects/support/activity
* some message threads have missing messages after migration, e.g.
http://rubyforge.org/forum/message.php?msg_id=92
vs
http://localhost:3000/boards/1/topics/13

Redmine FIXMEs
* will need to modify Redmine auth to use MD5 since that's what GForge uses
* will need to limit => 20 on /projects

General

* see <tt>lib/tasks/migrate_from_gforge.rake</tt>
* To run it: <tt>rake db:migrate:reset && rake redmine:migrate_from_gforge REDMINE_LANG=en</tt>
* To migrate just one project: <tt>rake redmine:migrate_from_gforge REDMINE_LANG=en GFORGE_GROUP_TO_MIGRATE=rubygems</tt>

You can look at both object models in the same Ruby process like this:

  $ ./script/console
  Loading development environment (Rails 2.3.5)
  >> require 'lib/tasks/gforge_models.rb' ; include GForgeMigrate
  => Object
  >> GForgeGroup.count
  => 8821
  >> Project.count
  => 11

I found it helpful to add this to my <tt>~/.railsrc</tt>:

  if Dir.getwd == "/Users/tom/github/rubyforge"
    require 'active_record'
    require 'lib/tasks/gforge_models.rb'
    include GForgeMigrate
  end

That way I don't have to type that <tt>require</tt> every time I get into <tt>script/console</tt> to troubleshoot a migration failure.

Some notes on the differences between the GForge and the Redmine object models:

* GForge stores the user language setting as a foreign key into the <tt>supported_languages</tt> table.  Redmine stores it as a two letter string (e.g., 'en') in <tt>users.language</tt>.
* The GForge <tt>artifact_group_list</tt> table gets mapped into rows in the Redmine <tt>projects_trackers</tt> table (<tt>projects</tt> HABTM <tt>trackers</tt>).  Redmine <tt>trackers</tt> are not per <tt>project</tt>; they are shared for the whole system.  The current migration only provisions rows in the <tt>projects_trackers</tt> table as they are needed - e.g., a <tt>project</tt> won't get a "Bug" <tt>tracker</tt> unless there's a GForge <tt>artifact</tt> in a "Bug" GForge <tt>artifact_group_list</tt> in this project.  If there's a GForge <tt>artifact_group_list</tt> with an unexpected name (e.g., "Tom's Issues") those get mapped into the "Bug" <tt>tracker</tt>.
* GForge <tt>artifacts</tt> have only three statuses (open/closed/deleted) whereas Redmine issues have six possible <tt>IssueStatus</tt> settings, so I just map them over to the <tt>IssueStatus</tt> with the same name.  GForge <tt>artifacts</tt> have five priority levels; these map onto Redmine's five standard <tt>IssueCategory</tt> values.


=== GForge table to Redmine table mapping
  artifact                     issues
  artifact_canned_responses      
  artifact_category            issue_categories
  artifact_counts_agg
  artifact_extra_field_data
  artifact_extra_field_elements
  artifact_extra_field_list
  artifact_file
  artifact_group               
  artifact_group_list          project_trackers
  artifact_history
  artifact_message             journals
  artifact_monitor             watchers
  artifact_perm
  artifact_resolution
  artifact_status
  canned_responses
  country_code
  db_images
  doc_data
  doc_groups
  doc_states
  filemodule_monitor
  forum                        boards
  forum_agg_msg_count
  forum_group_list
  forum_monitored_forums
  forum_perm
  forum_saved_place
  frs_dlstats_file
  frs_dlstats_filetotal_agg
  frs_file
  frs_filetype
  frs_package
  frs_processor
  frs_release
  frs_status
  group_cvs_history
  group_history
  group_plugin
  groups                       projects
  licenses
  mail_group_list
  news_bytes
  plugins
  project_assigned_to
  project_category
  project_counts_agg
  project_dependencies
  project_group_doccat
  project_group_forum
  project_group_list
  project_history
  project_messages
  project_metric
  project_metric_tmp1
  project_perm
  project_status
  project_sums_agg
  project_task
  project_task_artifact
  project_task_external_order
  project_weekly_metric
  prweb_vhost
  role
  role_setting
  schema_migrations
  themes
  trove_agg
  trove_cat
  trove_group_link
  trove_treesums
  user_bookmarks
  user_group                   members,member_roles
  user_plugin
  user_preferences
  users                      users,user_preferences


=== Tables that won't be migrated
  activity_log               
  activity_log_old           
  activity_log_old_old       
  api_requests                 
  cron_history
  disk_usages                
  gem_namespace_ownerships   
  massmail_queue
  mirrors  
  people_job
  people_job_category
  people_job_inventory
  people_job_status
  people_skill
  people_skill_inventory
  people_skill_level
  people_skill_year
  prdb_dbs - empty in the RubyForge DB
  prdb_states - empty in the RubyForge DB
  prdb_types - empty in the RubyForge DB
  rep_group_act_daily
  rep_group_act_monthly
  rep_group_act_weekly
  rep_groups_added_daily
  rep_groups_added_monthly
  rep_groups_added_weekly
  rep_groups_cum_daily
  rep_groups_cum_monthly
  rep_groups_cum_weekly
  rep_time_category
  rep_time_tracking
  rep_user_act_daily
  rep_user_act_monthly
  rep_user_act_weekly
  rep_users_added_daily
  rep_users_added_monthly
  rep_users_added_weekly
  rep_users_cum_daily
  rep_users_cum_monthly
  rep_users_cum_weekly
  skills_data
  skills_data_types
  snippet
  snippet_package
  snippet_package_item
  snippet_package_version
  snippet_version
  stats_agg_logo_by_day
  stats_agg_logo_by_group
  stats_agg_pages_by_day
  stats_agg_site_by_group
  stats_cvs_group
  stats_cvs_user
  stats_project
  stats_project_developers
  stats_project_metric
  stats_project_months
  stats_site
  stats_site_months
  stats_site_pages_by_day
  stats_site_pages_by_month
  stats_subd_pages
  supported_languages - there's a foreign key to this table from users, and that data is captured in redmine's users.language field
  survey_question_types
  survey_questions
  survey_rating_aggregate
  survey_rating_response
  survey_responses
  surveys
  user_diary
  user_diary_monitor
  user_metric - empty in the RubyForge DB
  user_metric0 - empty in the RubyForge DB
  user_metric_history - empty in the RubyForge DB
  user_ratings
  user_session
  user_type
